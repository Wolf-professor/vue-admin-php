{"remainingRequest":"/Users/quan/code/vue-admin-php/view/node_modules/thread-loader/dist/cjs.js!/Users/quan/code/vue-admin-php/view/node_modules/babel-loader/lib/index.js!/Users/quan/code/vue-admin-php/view/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/quan/code/vue-admin-php/view/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/quan/code/vue-admin-php/view/src/views/userManage/admin/authRole.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/quan/code/vue-admin-php/view/src/views/userManage/admin/authRole.vue","mtime":1648609501803},{"path":"/Users/quan/code/vue-admin-php/view/babel.config.js","mtime":1648609501757},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/cache-loader/dist/cjs.js","mtime":1614678925383},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/thread-loader/dist/cjs.js","mtime":1614678926780},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/babel-loader/lib/index.js","mtime":1648609858414},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/cache-loader/dist/cjs.js","mtime":1614678925383},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/vue-loader/lib/index.js","mtime":1648609878333}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _toConsumableArray from \"/Users/quan/code/vue-admin-php/view/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { authRoleList, authRoleAuthList, authRoleAuth, authRoleSave, authRoleDelete } from \"../../../api/auth/authRole\";\nvar formJson = {\n  id: \"\",\n  name: \"\",\n  status: 1,\n  remark: \"\",\n  listorder: 999\n};\nexport default {\n  data: function data() {\n    return {\n      query: {\n        name: \"\",\n        status: \"\",\n        page: 1,\n        limit: 20\n      },\n      list: [],\n      total: 0,\n      loading: true,\n      authList: [],\n      defaultProps: {\n        children: \"children\",\n        label: \"title\"\n      },\n      authLoading: false,\n      authFormVisible: false,\n      authFormData: {\n        role_id: \"\",\n        auth_rules: []\n      },\n      authDefaultCheckedKeys: [],\n      index: null,\n      formName: null,\n      formMap: {\n        add: \"新增\",\n        edit: \"编辑\"\n      },\n      formLoading: false,\n      formVisible: false,\n      formData: formJson,\n      formRules: {\n        name: [{\n          required: true,\n          message: \"请输入名称\",\n          trigger: \"blur\"\n        }],\n        status: [{\n          required: true,\n          message: \"请选择状态\",\n          trigger: \"change\"\n        }]\n      },\n      deleteLoading: false\n    };\n  },\n  methods: {\n    onReset: function onReset() {\n      this.$router.push({\n        path: \"\"\n      });\n      this.query = {\n        name: \"\",\n        status: \"\",\n        page: 1,\n        limit: 20\n      };\n      this.getList();\n    },\n    onSubmit: function onSubmit() {\n      this.getList();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.query.page = val;\n      this.getList();\n    },\n    getList: function getList() {\n      var _this = this;\n\n      this.loading = true;\n      authRoleList(this.query).then(function (response) {\n        _this.loading = false;\n        _this.list = response.data.list || [];\n        _this.total = response.data.total || 0;\n      }).catch(function () {\n        _this.loading = false;\n        _this.list = [];\n        _this.total = 0;\n      });\n    },\n    // 显示授权界面\n    handleAuth: function handleAuth(roleId) {\n      var _this2 = this;\n\n      this.authFormData.role_id = roleId;\n      this.authFormData.auth_rules = [];\n      this.authList = [];\n      authRoleAuthList({\n        id: roleId\n      }).then(function (response) {\n        if (response.code) {\n          _this2.authFormVisible = false;\n\n          _this2.$message({\n            message: response.message,\n            type: \"error\"\n          });\n\n          return;\n        }\n\n        _this2.authFormVisible = true;\n        _this2.authList = response.data.auth_list || [];\n        var checkedKeys = response.data.checked_keys || [];\n        var tempCheckedKeys = [];\n        var id = null;\n        var node = null;\n\n        var getTreeNode = function getTreeNode(arr, id) {\n          for (var i in arr) {\n            var tempNode = arr[i];\n\n            if (tempNode.id === id) {\n              // 找到了，就不找了\n              node = tempNode;\n            } // 如果还有子节点，再继续找\n\n\n            getTreeNode(tempNode.children, id);\n          }\n        };\n\n        for (var i in checkedKeys) {\n          id = checkedKeys[i];\n          getTreeNode(_this2.authList, id);\n\n          if (node && node.children.length <= 0) {\n            // 如果下面没有子节点，则加入\n            tempCheckedKeys.push(id);\n          }\n        }\n\n        _this2.authDefaultCheckedKeys = [];\n        _this2.authDefaultCheckedKeys = tempCheckedKeys; // this.$refs.tree.setCheckedKeys(tempCheckedKeys);\n      }).catch(function () {});\n    },\n    authSubmit: function authSubmit() {\n      var _this3 = this;\n\n      this.authLoading = true;\n\n      var getNodeParents = function getNodeParents(node) {\n        var arr = [];\n        var id = node.data.id || null;\n\n        if (id) {\n          arr.push(node.data.id);\n        }\n\n        if (node.parent) {\n          arr = arr.concat(getNodeParents(node.parent));\n        }\n\n        return arr;\n      };\n\n      var checkedKeys = this.$refs.tree.getCheckedKeys();\n      var arr = [];\n\n      var _iterator = _createForOfIteratorHelper(checkedKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var checkedKey = _step.value;\n          var node = this.$refs.tree.getNode(checkedKey);\n          arr = arr.concat(getNodeParents(node));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var setArr = new Set(arr);\n      this.authFormData.auth_rules = _toConsumableArray(setArr);\n\n      if (!this.authFormData) {\n        this.$alert(\"请至少选择一个权限\", \"提示\", {\n          confirmButtonText: \"确定\"\n        });\n        return false;\n      }\n\n      authRoleAuth(this.authFormData).then(function (response) {\n        _this3.authLoading = false;\n\n        if (response.code) {\n          _this3.$message.error(response.message);\n\n          return false;\n        }\n\n        _this3.$message.success(\"授权成功\"); // 刷新表单\n\n\n        _this3.authFormVisible = false;\n      }).catch(function () {\n        _this3.authLoading = false;\n      });\n    },\n    // 刷新表单\n    resetForm: function resetForm() {\n      if (this.$refs[\"dataForm\"]) {\n        // 清空验证信息表单\n        this.$refs[\"dataForm\"].clearValidate(); // 刷新表单\n\n        this.$refs[\"dataForm\"].resetFields();\n      }\n    },\n    // 隐藏表单\n    hideForm: function hideForm() {\n      // 更改值\n      this.formVisible = !this.formVisible;\n      return true;\n    },\n    // 显示表单\n    handleForm: function handleForm(index, row) {\n      this.formVisible = true;\n      this.formData = JSON.parse(JSON.stringify(formJson));\n\n      if (row !== null) {\n        this.formData = Object.assign({}, row);\n      }\n\n      this.formName = \"add\";\n\n      if (index !== null) {\n        this.index = index;\n        this.formName = \"edit\";\n      }\n    },\n    formSubmit: function formSubmit() {\n      var _this4 = this;\n\n      this.$refs[\"dataForm\"].validate(function (valid) {\n        if (valid) {\n          _this4.formLoading = true;\n          var data = Object.assign({}, _this4.formData);\n          authRoleSave(data, _this4.formName).then(function (response) {\n            _this4.formLoading = false;\n\n            if (response.code) {\n              _this4.$message.error(response.message);\n\n              return false;\n            }\n\n            _this4.$message.success(\"操作成功\");\n\n            _this4.formVisible = false;\n\n            if (_this4.formName === \"add\") {\n              // 向头部添加数据\n              if (response.data && response.data.id) {\n                data.id = response.data.id;\n\n                _this4.list.unshift(data);\n              }\n            } else {\n              _this4.list.splice(_this4.index, 1, data);\n            } // 刷新表单\n\n\n            _this4.resetForm();\n          }).catch(function () {\n            _this4.formLoading = false;\n          });\n        }\n      });\n    },\n    // 删除\n    handleDel: function handleDel(index, row) {\n      var _this5 = this;\n\n      if (row.id) {\n        this.$confirm(\"确认删除该记录吗?\", \"提示\", {\n          type: \"warning\"\n        }).then(function () {\n          _this5.deleteLoading = true;\n          var para = {\n            id: row.id\n          };\n          authRoleDelete(para).then(function (response) {\n            _this5.deleteLoading = false;\n\n            if (response.code) {\n              _this5.$message.error(response.message);\n\n              return false;\n            }\n\n            _this5.$message.success(\"删除成功\"); // 刷新数据\n\n\n            _this5.list.splice(index, 1);\n          }).catch(function () {\n            _this5.deleteLoading = false;\n          });\n        }).catch(function () {\n          _this5.$message.info(\"取消删除\");\n        });\n      }\n    }\n  },\n  filters: {\n    statusFilterType: function statusFilterType(status) {\n      var statusMap = {\n        0: \"gray\",\n        1: \"success\"\n      };\n      return statusMap[status];\n    },\n    statusFilterName: function statusFilterName(status) {\n      var statusMap = {\n        0: \"禁用\",\n        1: \"正常\"\n      };\n      return statusMap[status];\n    }\n  },\n  mounted: function mounted() {},\n  created: function created() {\n    // 加载表格数据\n    this.getList();\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA,SACAA,YADA,EAEAC,gBAFA,EAGAC,YAHA,EAIAC,YAJA,EAKAC,cALA;AAOA;AACAC,QADA;AAEAC,UAFA;AAGAC,WAHA;AAIAC,YAJA;AAKAC;AALA;AAOA;AACAC,MADA,kBACA;AACA;AACAC;AACAL,gBADA;AAEAC,kBAFA;AAGAK,eAHA;AAIAC;AAJA,OADA;AAOAC,cAPA;AAQAC,cARA;AASAC,mBATA;AAUAC,kBAVA;AAWAC;AACAC,4BADA;AAEAC;AAFA,OAXA;AAeAC,wBAfA;AAgBAC,4BAhBA;AAiBAC;AACAC,mBADA;AAEAC;AAFA,OAjBA;AAqBAC,gCArBA;AAsBAC,iBAtBA;AAuBAC,oBAvBA;AAwBAC;AACAC,iBADA;AAEAC;AAFA,OAxBA;AA4BAC,wBA5BA;AA6BAC,wBA7BA;AA8BAC,wBA9BA;AA+BAC;AACA7B,eACA;AAAA8B;AAAAC;AAAAC;AAAA,SADA,CADA;AAIA/B,iBACA;AAAA6B;AAAAC;AAAAC;AAAA,SADA;AAJA,OA/BA;AAuCAC;AAvCA;AAyCA,GA3CA;AA4CAC;AACAC,WADA,qBACA;AACA;AACAC;AADA;AAGA;AACApC,gBADA;AAEAC,kBAFA;AAGAK,eAHA;AAIAC;AAJA;AAMA;AACA,KAZA;AAaA8B,YAbA,sBAaA;AACA;AACA,KAfA;AAgBAC,uBAhBA,+BAgBAC,GAhBA,EAgBA;AACA;AACA;AACA,KAnBA;AAoBAC,WApBA,qBAoBA;AAAA;;AACA;AACA9C,+BACA+C,IADA,CACA;AACA;AACA;AACA;AACA,OALA,EAMAC,KANA,CAMA;AACA;AACA;AACA;AACA,OAVA;AAWA,KAjCA;AAkCA;AACAC,cAnCA,sBAmCAC,MAnCA,EAmCA;AAAA;;AACA;AACA;AACA;AACAjD;AAAAI;AAAA,SACA0C,IADA,CACA;AACA;AACA;;AACA;AACAV,qCADA;AAEAc;AAFA;;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACAC;AACA,aALA,CAMA;;;AACAC;AACA;AACA,SAVA;;AAWA;AACAhD;AACAgD;;AACA;AACA;AACAC;AACA;AACA;;AACA;AACA,wDAnCA,CAoCA;AACA,OAtCA,EAuCAN,KAvCA,CAuCA,cAvCA;AAwCA,KA/EA;AAgFAO,cAhFA,wBAgFA;AAAA;;AACA;;AACA;AACA;AACA;;AACA;AACAC;AACA;;AACA;AACAA;AACA;;AACA;AACA,OAVA;;AAWA;AACA;;AAdA,iDAeAC,WAfA;AAAA;;AAAA;AAeA;AAAA;AACA;AACAD;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;;AAmBA;AACA;;AACA;AACA;AACAE;AADA;AAGA;AACA;;AACAxD,sCACA6C,IADA,CACA;AACA;;AACA;AACA;;AACA;AACA;;AACA,wCANA,CAOA;;;AACA;AACA,OAVA,EAWAC,KAXA,CAWA;AACA;AACA,OAbA;AAcA,KAzHA;AA0HA;AACAW,aA3HA,uBA2HA;AACA;AACA;AACA,+CAFA,CAGA;;AACA;AACA;AACA,KAlIA;AAmIA;AACAC,YApIA,sBAoIA;AACA;AACA;AACA;AACA,KAxIA;AAyIA;AACAC,cA1IA,sBA0IAlC,KA1IA,EA0IAmC,GA1IA,EA0IA;AACA;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA,KArJA;AAsJAC,cAtJA,wBAsJA;AAAA;;AACA;AACA;AACA;AACA;AACA5D,8CACA4C,IADA,CACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACArC;;AACA;AACA;AACA,aANA,MAMA;AACA;AACA,aAhBA,CAiBA;;;AACA;AACA,WApBA,EAqBAsC,KArBA,CAqBA;AACA;AACA,WAvBA;AAwBA;AACA,OA7BA;AA8BA,KArLA;AAsLA;AACAgB,aAvLA,qBAuLArC,KAvLA,EAuLAmC,GAvLA,EAuLA;AAAA;;AACA;AACA;AACAX;AADA,WAGAJ,IAHA,CAGA;AACA;AACA;AAAA1C;AAAA;AACAD,+BACA2C,IADA,CACA;AACA;;AACA;AACA;;AACA;AACA;;AACA,4CANA,CAOA;;;AACA;AACA,WAVA,EAWAC,KAXA,CAWA;AACA;AACA,WAbA;AAcA,SApBA,EAqBAA,KArBA,CAqBA;AACA;AACA,SAvBA;AAwBA;AACA;AAlNA,GA5CA;AAgQAiB;AACAC,oBADA,4BACA3D,MADA,EACA;AACA;AACA,iBADA;AAEA;AAFA;AAIA;AACA,KAPA;AAQA4D,oBARA,4BAQA5D,MARA,EAQA;AACA;AACA,eADA;AAEA;AAFA;AAIA;AACA;AAdA,GAhQA;AAgRA6D,SAhRA,qBAgRA,EAhRA;AAiRAC,SAjRA,qBAiRA;AACA;AACA;AACA;AApRA","names":["authRoleList","authRoleAuthList","authRoleAuth","authRoleSave","authRoleDelete","id","name","status","remark","listorder","data","query","page","limit","list","total","loading","authList","defaultProps","children","label","authLoading","authFormVisible","authFormData","role_id","auth_rules","authDefaultCheckedKeys","index","formName","formMap","add","edit","formLoading","formVisible","formData","formRules","required","message","trigger","deleteLoading","methods","onReset","path","onSubmit","handleCurrentChange","val","getList","then","catch","handleAuth","roleId","type","node","getTreeNode","tempCheckedKeys","authSubmit","arr","checkedKeys","confirmButtonText","resetForm","hideForm","handleForm","row","formSubmit","handleDel","filters","statusFilterType","statusFilterName","mounted","created"],"sourceRoot":"src/views/userManage/admin","sources":["authRole.vue"],"sourcesContent":["<template>\n    <div>\n        <el-form :inline=\"true\" :model=\"query\" class=\"query-form\" size=\"mini\">\n            <el-form-item class=\"query-form-item\">\n                <el-input v-model=\"query.name\" placeholder=\"角色名称\"></el-input>\n            </el-form-item>\n            <el-form-item class=\"query-form-item\">\n                <el-select v-model=\"query.status\" placeholder=\"状态\">\n                    <el-option label=\"全部\" value=\"\"></el-option>\n                    <el-option label=\"禁用\" value=\"0\"></el-option>\n                    <el-option label=\"正常\" value=\"1\"></el-option>\n                </el-select>\n            </el-form-item>\n\n            <el-form-item>\n                <el-button-group>\n                    <el-button type=\"primary\" icon=\"el-icon-refresh\" @click=\"onReset\"></el-button>\n                    <el-button type=\"primary\" icon=\"search\" @click=\"onSubmit\">查询</el-button>\n                    <el-button type=\"primary\" @click.native=\"handleForm(null,null)\">新增</el-button>\n                </el-button-group>\n            </el-form-item>\n        </el-form>\n        <el-table\n            v-loading=\"loading\"\n            :data=\"list\"\n            style=\"width: 100%;\"\n            max-height=\"500\">\n            <el-table-column\n                label=\"角色 ID\"\n                prop=\"id\">\n            </el-table-column>\n            <el-table-column\n                label=\"角色名称\"\n                prop=\"name\">\n            </el-table-column>\n            <el-table-column\n                label=\"状态\">\n                <template slot-scope=\"scope\">\n                    <el-tag :type=\"scope.row.status | statusFilterType\">{{scope.row.status | statusFilterName}}</el-tag>\n                </template>\n            </el-table-column>\n            <el-table-column\n                label=\"描述\"\n                :show-overflow-tooltip=\"true\">\n                <template slot-scope=\"scope\">\n                    <span>{{ scope.row.remark }}</span>\n                </template>\n            </el-table-column>\n            <el-table-column\n                label=\"操作\"\n                fixed=\"right\"\n                width=\"200\">\n                <template slot-scope=\"scope\">\n                    <el-button type=\"text\" size=\"small\" @click.native=\"handleAuth(scope.row.id)\">授权</el-button>\n                    <el-button type=\"text\" size=\"small\" @click.native=\"handleForm(scope.$index, scope.row)\">编辑</el-button>\n                    <el-button type=\"text\" size=\"small\" @click.native=\"handleDel(scope.$index, scope.row)\" :loading=\"deleteLoading\">删除</el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n\n        <el-pagination\n            :page-size=\"query.limit\"\n            @current-change=\"handleCurrentChange\"\n            layout=\"prev, pager, next\"\n            :total=\"total\">\n        </el-pagination>\n\n        <!--授权界面-->\n        <el-dialog\n            title=\"授权\"\n            :visible.sync=\"authFormVisible\"\n            :close-on-click-modal=\"false\"\n            class=\"dialog\">\n            <el-tree\n                style=\"max-height: 75vh;overflow-y: auto;\"\n                :data=\"authList\"\n                show-checkbox=\"\"\n                default-expand-all=\"\"\n                node-key=\"id\"\n                ref=\"tree\"\n                :props=\"defaultProps\"\n                :default-checked-keys=\"authDefaultCheckedKeys\">\n            </el-tree>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"authFormVisible = !authFormVisible\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"authSubmit()\" :loading=\"authLoading\">提交\n                </el-button>\n            </div>\n        </el-dialog>\n\n        <!--表单-->\n        <el-dialog\n            :title=\"formMap[formName]\"\n            :visible.sync=\"formVisible\"\n            :before-close=\"hideForm\"\n            width=\"85%\"\n            top=\"5vh\">\n            <el-form :model=\"formData\" :rules=\"formRules\" ref=\"dataForm\">\n                <el-form-item label=\"角色名称\" prop=\"name\">\n                    <el-input v-model=\"formData.name\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"排序\" prop=\"listorder\">\n                    <el-input type=\"\" v-model=\"formData.listorder\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"状态\" prop=\"status\">\n                    <el-radio-group v-model=\"formData.status\">\n                        <el-radio :label=\"0\">禁用</el-radio>\n                        <el-radio :label=\"1\">正常</el-radio>\n                    </el-radio-group>\n                </el-form-item>\n                <el-form-item label=\"描述\">\n                    <el-input type=\"textarea\" v-model=\"formData.remark\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"hideForm\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"formSubmit()\" :loading=\"formLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n    </div>\n\n</template>\n\n<script>\nimport {\n    authRoleList,\n    authRoleAuthList,\n    authRoleAuth,\n    authRoleSave,\n    authRoleDelete\n} from \"../../../api/auth/authRole\";\nconst formJson = {\n    id: \"\",\n    name: \"\",\n    status: 1,\n    remark: \"\",\n    listorder: 999\n};\nexport default {\n    data() {\n        return {\n            query: {\n                name: \"\",\n                status: \"\",\n                page: 1,\n                limit: 20\n            },\n            list: [],\n            total: 0,\n            loading: true,\n            authList: [],\n            defaultProps: {\n                children: \"children\",\n                label: \"title\"\n            },\n            authLoading: false,\n            authFormVisible: false,\n            authFormData: {\n                role_id: \"\",\n                auth_rules: []\n            },\n            authDefaultCheckedKeys: [],\n            index: null,\n            formName: null,\n            formMap: {\n                add: \"新增\",\n                edit: \"编辑\"\n            },\n            formLoading: false,\n            formVisible: false,\n            formData: formJson,\n            formRules: {\n                name: [\n                    { required: true, message: \"请输入名称\", trigger: \"blur\" }\n                ],\n                status: [\n                    { required: true, message: \"请选择状态\", trigger: \"change\" }\n                ]\n            },\n            deleteLoading: false\n        };\n    },\n    methods: {\n        onReset() {\n            this.$router.push({\n                path: \"\"\n            });\n            this.query = {\n                name: \"\",\n                status: \"\",\n                page: 1,\n                limit: 20\n            };\n            this.getList();\n        },\n        onSubmit() {\n            this.getList();\n        },\n        handleCurrentChange(val) {\n            this.query.page = val;\n            this.getList();\n        },\n        getList() {\n            this.loading = true;\n            authRoleList(this.query)\n                .then(response => {\n                    this.loading = false;\n                    this.list = response.data.list || [];\n                    this.total = response.data.total || 0;\n                })\n                .catch(() => {\n                    this.loading = false;\n                    this.list = [];\n                    this.total = 0;\n                });\n        },\n        // 显示授权界面\n        handleAuth(roleId) {\n            this.authFormData.role_id = roleId;\n            this.authFormData.auth_rules = [];\n            this.authList = [];\n            authRoleAuthList({ id: roleId })\n                .then(response => {\n                    if (response.code) {\n                        this.authFormVisible = false;\n                        this.$message({\n                            message: response.message,\n                            type: \"error\"\n                        });\n                        return;\n                    }\n                    this.authFormVisible = true;\n                    this.authList = response.data.auth_list || [];\n                    const checkedKeys = response.data.checked_keys || [];\n                    let tempCheckedKeys = [];\n                    let id = null;\n                    let node = null;\n                    let getTreeNode = function(arr, id) {\n                        for (let i in arr) {\n                            let tempNode = arr[i];\n                            if (tempNode.id === id) {\n                                // 找到了，就不找了\n                                node = tempNode;\n                            }\n                            // 如果还有子节点，再继续找\n                            getTreeNode(tempNode.children, id);\n                        }\n                    };\n                    for (let i in checkedKeys) {\n                        id = checkedKeys[i];\n                        getTreeNode(this.authList, id);\n                        if (node && node.children.length <= 0) {\n                            // 如果下面没有子节点，则加入\n                            tempCheckedKeys.push(id);\n                        }\n                    }\n                    this.authDefaultCheckedKeys = [];\n                    this.authDefaultCheckedKeys = tempCheckedKeys;\n                    // this.$refs.tree.setCheckedKeys(tempCheckedKeys);\n                })\n                .catch(() => {});\n        },\n        authSubmit() {\n            this.authLoading = true;\n            let getNodeParents = function(node) {\n                let arr = [];\n                let id = node.data.id || null;\n                if (id) {\n                    arr.push(node.data.id);\n                }\n                if (node.parent) {\n                    arr = arr.concat(getNodeParents(node.parent));\n                }\n                return arr;\n            };\n            let checkedKeys = this.$refs.tree.getCheckedKeys();\n            let arr = [];\n            for (let checkedKey of checkedKeys) {\n                let node = this.$refs.tree.getNode(checkedKey);\n                arr = arr.concat(getNodeParents(node));\n            }\n            let setArr = new Set(arr);\n            this.authFormData.auth_rules = [...setArr];\n            if (!this.authFormData) {\n                this.$alert(\"请至少选择一个权限\", \"提示\", {\n                    confirmButtonText: \"确定\"\n                });\n                return false;\n            }\n            authRoleAuth(this.authFormData)\n                .then(response => {\n                    this.authLoading = false;\n                    if (response.code) {\n                        this.$message.error(response.message);\n                        return false;\n                    }\n                    this.$message.success(\"授权成功\");\n                    // 刷新表单\n                    this.authFormVisible = false;\n                })\n                .catch(() => {\n                    this.authLoading = false;\n                });\n        },\n        // 刷新表单\n        resetForm() {\n            if (this.$refs[\"dataForm\"]) {\n                // 清空验证信息表单\n                this.$refs[\"dataForm\"].clearValidate();\n                // 刷新表单\n                this.$refs[\"dataForm\"].resetFields();\n            }\n        },\n        // 隐藏表单\n        hideForm() {\n            // 更改值\n            this.formVisible = !this.formVisible;\n            return true;\n        },\n        // 显示表单\n        handleForm(index, row) {\n            this.formVisible = true;\n            this.formData = JSON.parse(JSON.stringify(formJson));\n            if (row !== null) {\n                this.formData = Object.assign({}, row);\n            }\n            this.formName = \"add\";\n            if (index !== null) {\n                this.index = index;\n                this.formName = \"edit\";\n            }\n        },\n        formSubmit() {\n            this.$refs[\"dataForm\"].validate(valid => {\n                if (valid) {\n                    this.formLoading = true;\n                    let data = Object.assign({}, this.formData);\n                    authRoleSave(data, this.formName)\n                        .then(response => {\n                            this.formLoading = false;\n                            if (response.code) {\n                                this.$message.error(response.message);\n                                return false;\n                            }\n                            this.$message.success(\"操作成功\");\n                            this.formVisible = false;\n                            if (this.formName === \"add\") {\n                                // 向头部添加数据\n                                if (response.data && response.data.id) {\n                                    data.id = response.data.id;\n                                    this.list.unshift(data);\n                                }\n                            } else {\n                                this.list.splice(this.index, 1, data);\n                            }\n                            // 刷新表单\n                            this.resetForm();\n                        })\n                        .catch(() => {\n                            this.formLoading = false;\n                        });\n                }\n            });\n        },\n        // 删除\n        handleDel(index, row) {\n            if (row.id) {\n                this.$confirm(\"确认删除该记录吗?\", \"提示\", {\n                    type: \"warning\"\n                })\n                    .then(() => {\n                        this.deleteLoading = true;\n                        let para = { id: row.id };\n                        authRoleDelete(para)\n                            .then(response => {\n                                this.deleteLoading = false;\n                                if (response.code) {\n                                    this.$message.error(response.message);\n                                    return false;\n                                }\n                                this.$message.success(\"删除成功\");\n                                // 刷新数据\n                                this.list.splice(index, 1);\n                            })\n                            .catch(() => {\n                                this.deleteLoading = false;\n                            });\n                    })\n                    .catch(() => {\n                        this.$message.info(\"取消删除\");\n                    });\n            }\n        }\n    },\n    filters: {\n        statusFilterType(status) {\n            const statusMap = {\n                0: \"gray\",\n                1: \"success\"\n            };\n            return statusMap[status];\n        },\n        statusFilterName(status) {\n            const statusMap = {\n                0: \"禁用\",\n                1: \"正常\"\n            };\n            return statusMap[status];\n        }\n    },\n    mounted() {},\n    created() {\n        // 加载表格数据\n        this.getList();\n    }\n};\n</script>\n\n<style type=\"text/scss\" lang=\"scss\">\n</style>\n"]}]}