{"remainingRequest":"/Users/quan/code/vue-admin-php/view/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/quan/code/vue-admin-php/view/src/views/userManage/admin/authPermissionRule.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/quan/code/vue-admin-php/view/src/views/userManage/admin/authPermissionRule.vue","mtime":1648609501803},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/babel-loader/lib/index.js","mtime":1648609858414},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/cache-loader/dist/cjs.js","mtime":1614678925383},{"path":"/Users/quan/code/vue-admin-php/view/node_modules/vue-loader/lib/index.js","mtime":1648609878333}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n    authPermissionRuleList,\n    authPermissionRuleSave,\n    authPermissionRuleDelete\n} from \"../../../api/auth/authPermissionRule\";\nconst formJson = {\n    id: \"\",\n    pid: \"2\",\n    name: \"\",\n    title: \"\",\n    status: 1,\n    condition: \"\",\n    listorder: 999\n};\nexport default {\n    data() {\n        return {\n            query: {\n                name: \"\",\n                status: \"\"\n            },\n            mergeList: [],\n            node: null,\n            defaultProps: {\n                children: \"children\",\n                label: \"title\"\n            },\n            treeList: [],\n            loading: true,\n            index: null,\n            formName: null,\n            formMap: {\n                add: \"新增\",\n                edit: \"编辑\"\n            },\n            formLoading: false,\n            formVisible: false,\n            formData: formJson,\n            formRules: {\n                name: [\n                    { required: true, message: \"请输入规则名\", trigger: \"blur\" }\n                ],\n                title: [\n                    { required: true, message: \"请输入标题\", trigger: \"blur\" }\n                ],\n                status: [\n                    { required: true, message: \"请选择状态\", trigger: \"change\" }\n                ]\n            },\n            pidData: {},\n            deleteLoading: false\n        };\n    },\n    methods: {\n        /*eslint-disable */\n        renderContent (h, { node, data, store }) {\n            return (\n                <span style=\"flex: 1; display: flex; align-items: center; justify-content: space-between; font-size: 14px; padding-right: 8px;\">\n                <span>\n                <span title={ data.name }>{node.label}</span>\n            </span>\n            <span>\n            <el-button style=\"font-size: 12px;\" type=\"text\" on-click={ () => this.handleForm(node, data, 'add') }>添加子菜单</el-button>\n            <el-button style=\"font-size: 12px;\" type=\"text\" on-click={ () => this.handleForm(node, data, 'edit') }>编辑</el-button>\n            <el-button style=\"font-size: 12px;\" type=\"text\" on-click={ () => this.handleDel(node, data) }>删除</el-button>\n            </span>\n            </span>)\n        },\n        onReset() {\n            this.$router.push({\n                path: \"\"\n            });\n            this.query = {\n                name: \"\",\n                status: \"\"\n            };\n            this.getList();\n        },\n        onSubmit() {\n            this.getList();\n        },\n        getList() {\n            this.loading = true;\n            authPermissionRuleList(this.query)\n                .then(response => {\n                    this.loading = false;\n                    this.mergeList = response.data.list || [];\n                    this.treeList = response.data.tree_list || [];\n                })\n                .catch(() => {\n                    this.loading = false;\n                    this.mergeList = [];\n                    this.treeList = [];\n                });\n        },\n        // 刷新表单\n        resetForm() {\n            if (this.$refs[\"dataForm\"]) {\n                // 清空验证信息表单\n                this.$refs[\"dataForm\"].clearValidate();\n                // 刷新表单\n                this.$refs[\"dataForm\"].resetFields();\n            }\n        },\n        // 隐藏表单\n        hideForm() {\n            // 更改值\n            this.formVisible = !this.formVisible;\n            return true;\n        },\n        // 显示表单\n        handleForm(node, data, formName) {\n            this.formVisible = true;\n            this.pidData = data || null;\n            formJson.pid = (data && parseInt(data.id)) || \"\";\n            this.formData = JSON.parse(JSON.stringify(formJson));\n            if (formName === \"edit\") {\n                this.formData = Object.assign({}, data);\n                this.node = node;\n            }\n            this.formData.pid = !this.formData.pid ? \"\" : this.formData.pid;\n            this.formName = formName;\n            if (data && data.id) {\n                this.index = this.mergeList.findIndex(d => d.id === data.id);\n            }\n        },\n        formSubmit() {\n            this.$refs[\"dataForm\"].validate(valid => {\n                if (valid) {\n                    this.formLoading = true;\n                    let data = Object.assign({}, this.formData);\n                    authPermissionRuleSave(data, this.formName)\n                        .then(response => {\n                            this.formLoading = false;\n                            if (response.code) {\n                                this.$message.error(response.message);\n                                return false;\n                            }\n                            this.$message.success(\"操作成功\");\n                            this.formVisible = false;\n                            if (this.formName !== \"edit\") {\n                                if (response.data && response.data.id) {\n                                    data.id = response.data.id;\n                                    if (this.pidData) {\n                                        if (!this.pidData.children) {\n                                            this.$set(\n                                                this.pidData,\n                                                \"children\",\n                                                []\n                                            );\n                                        }\n                                        this.pidData.children.push(data);\n                                    } else {\n                                        this.mergeList.push(data);\n                                    }\n                                }\n                            } else {\n                                const parent = this.node.parent;\n                                const children =\n                                    parent.data.children || parent.data;\n                                const index = children.findIndex(\n                                    d => d.id === data.id\n                                );\n                                children.splice(index, 1, data);\n                            }\n                            // 刷新表单\n                            this.resetForm();\n                        })\n                        .catch(() => {\n                            this.formLoading = false;\n                        });\n                }\n            });\n        },\n        // 删除\n        handleDel(node, data) {\n            if (data.children && data.children.length > 0) {\n                this.$alert(\"请先删除子节点\", \"提示\", {\n                    confirmButtonText: \"确定\"\n                });\n                return false;\n            }\n            if (data.id) {\n                this.$confirm(\"确认删除该记录吗?\", \"提示\", {\n                    type: \"warning\"\n                })\n                    .then(() => {\n                        this.deleteLoading = true;\n                        let para = { id: data.id };\n                        authPermissionRuleDelete(para)\n                            .then(response => {\n                                this.deleteLoading = false;\n                                if (response.code) {\n                                    this.$message.error(response.message);\n                                    return false;\n                                }\n                                this.$message.success(\"删除成功\");\n                                const parent = node.parent;\n                                const children =\n                                    parent.data.children || parent.data;\n                                const index = children.findIndex(\n                                    d => d.id === data.id\n                                );\n                                children.splice(index, 1);\n                            })\n                            .catch(() => {\n                                this.deleteLoading = false;\n                            });\n                    })\n                    .catch(() => {\n                        this.$message.info(\"取消删除\");\n                    });\n            }\n        }\n    },\n    filters: {\n        statusFilterType(status) {\n            const statusMap = {\n                0: \"gray\",\n                1: \"success\"\n            };\n            return statusMap[status];\n        },\n        statusFilterName(status) {\n            const statusMap = {\n                0: \"禁用\",\n                1: \"正常\"\n            };\n            return statusMap[status];\n        }\n    },\n    mounted() {},\n    created() {\n        // 加载表格数据\n        this.getList();\n    }\n};\n",{"version":3,"sources":["authPermissionRule.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"authPermissionRule.vue","sourceRoot":"src/views/userManage/admin","sourcesContent":["<template>\n    <div>\n        <el-form :inline=\"true\" :model=\"query\" class=\"query-form\" size=\"mini\">\n            <el-form-item class=\"query-form-item\">\n                <el-input v-model=\"query.name\" placeholder=\"角色名称\"></el-input>\n            </el-form-item>\n            <el-form-item class=\"query-form-item\">\n                <el-select v-model=\"query.status\" placeholder=\"状态\">\n                    <el-option label=\"全部\" value=\"\"></el-option>\n                    <el-option label=\"禁用\" value=\"0\"></el-option>\n                    <el-option label=\"正常\" value=\"1\"></el-option>\n                </el-select>\n            </el-form-item>\n\n            <el-form-item>\n                <el-button-group>\n                    <el-button type=\"primary\" icon=\"el-icon-refresh\" @click=\"onReset\"></el-button>\n                    <el-button type=\"primary\" icon=\"search\" @click=\"onSubmit\">查询</el-button>\n                    <el-button type=\"primary\" @click.native=\"handleForm(null,null)\">新增</el-button>\n                </el-button-group>\n            </el-form-item>\n        </el-form>\n\n        <el-tree\n            :data=\"mergeList\"\n            :props=\"defaultProps\"\n            node-key=\"id\"\n            default-expand-all\n            :expand-on-click-node=\"false\"\n            :render-content=\"renderContent\">\n        </el-tree>\n\n        <!--表单界面-->\n        <el-dialog\n            :title=\"formMap[formName]\"\n            :visible.sync=\"formVisible\"\n            :before-close=\"hideForm\"\n            width=\"85%\"\n            top=\"5vh\">\n            <el-form :model=\"formData\" :rules=\"formRules\" ref=\"dataForm\">\n                <el-form-item label=\"父ID\" prop=\"pid\">\n                    <el-select v-model=\"formData.pid\" placeholder=\"顶级\">\n                        <el-option\n                            v-for=\"item in treeList\"\n                            :key=\"item.id\"\n                            :label=\"item.title\"\n                            :value=\"item.id\">\n                            <span style=\"float: left\"><span v-html=\"item.html\"></span>{{ item.title }}</span>\n                        </el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"规则名\" prop=\"name\">\n                    <el-input type=\"\" v-model=\"formData.name\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"规则标题\" prop=\"title\">\n                    <el-input type=\"\" v-model=\"formData.title\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"状态\" prop=\"status\">\n                    <el-radio-group v-model=\"formData.status\">\n                        <el-radio :label=\"0\">禁用</el-radio>\n                        <el-radio :label=\"1\">正常</el-radio>\n                    </el-radio-group>\n                </el-form-item>\n                <el-form-item label=\"额外的规则表达式\">\n                    <el-input type=\"textarea\" v-model=\"formData.condition\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"排序\" prop=\"listorder\">\n                    <el-input type=\"\" v-model=\"formData.listorder\" auto-complete=\"off\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click.native=\"hideForm\">取消</el-button>\n                <el-button type=\"primary\" @click.native=\"formSubmit()\" :loading=\"formLoading\">提交</el-button>\n            </div>\n        </el-dialog>\n    </div>\n\n</template>\n\n<script>\nimport {\n    authPermissionRuleList,\n    authPermissionRuleSave,\n    authPermissionRuleDelete\n} from \"../../../api/auth/authPermissionRule\";\nconst formJson = {\n    id: \"\",\n    pid: \"2\",\n    name: \"\",\n    title: \"\",\n    status: 1,\n    condition: \"\",\n    listorder: 999\n};\nexport default {\n    data() {\n        return {\n            query: {\n                name: \"\",\n                status: \"\"\n            },\n            mergeList: [],\n            node: null,\n            defaultProps: {\n                children: \"children\",\n                label: \"title\"\n            },\n            treeList: [],\n            loading: true,\n            index: null,\n            formName: null,\n            formMap: {\n                add: \"新增\",\n                edit: \"编辑\"\n            },\n            formLoading: false,\n            formVisible: false,\n            formData: formJson,\n            formRules: {\n                name: [\n                    { required: true, message: \"请输入规则名\", trigger: \"blur\" }\n                ],\n                title: [\n                    { required: true, message: \"请输入标题\", trigger: \"blur\" }\n                ],\n                status: [\n                    { required: true, message: \"请选择状态\", trigger: \"change\" }\n                ]\n            },\n            pidData: {},\n            deleteLoading: false\n        };\n    },\n    methods: {\n        /*eslint-disable */\n        renderContent (h, { node, data, store }) {\n            return (\n                <span style=\"flex: 1; display: flex; align-items: center; justify-content: space-between; font-size: 14px; padding-right: 8px;\">\n                <span>\n                <span title={ data.name }>{node.label}</span>\n            </span>\n            <span>\n            <el-button style=\"font-size: 12px;\" type=\"text\" on-click={ () => this.handleForm(node, data, 'add') }>添加子菜单</el-button>\n            <el-button style=\"font-size: 12px;\" type=\"text\" on-click={ () => this.handleForm(node, data, 'edit') }>编辑</el-button>\n            <el-button style=\"font-size: 12px;\" type=\"text\" on-click={ () => this.handleDel(node, data) }>删除</el-button>\n            </span>\n            </span>)\n        },\n        onReset() {\n            this.$router.push({\n                path: \"\"\n            });\n            this.query = {\n                name: \"\",\n                status: \"\"\n            };\n            this.getList();\n        },\n        onSubmit() {\n            this.getList();\n        },\n        getList() {\n            this.loading = true;\n            authPermissionRuleList(this.query)\n                .then(response => {\n                    this.loading = false;\n                    this.mergeList = response.data.list || [];\n                    this.treeList = response.data.tree_list || [];\n                })\n                .catch(() => {\n                    this.loading = false;\n                    this.mergeList = [];\n                    this.treeList = [];\n                });\n        },\n        // 刷新表单\n        resetForm() {\n            if (this.$refs[\"dataForm\"]) {\n                // 清空验证信息表单\n                this.$refs[\"dataForm\"].clearValidate();\n                // 刷新表单\n                this.$refs[\"dataForm\"].resetFields();\n            }\n        },\n        // 隐藏表单\n        hideForm() {\n            // 更改值\n            this.formVisible = !this.formVisible;\n            return true;\n        },\n        // 显示表单\n        handleForm(node, data, formName) {\n            this.formVisible = true;\n            this.pidData = data || null;\n            formJson.pid = (data && parseInt(data.id)) || \"\";\n            this.formData = JSON.parse(JSON.stringify(formJson));\n            if (formName === \"edit\") {\n                this.formData = Object.assign({}, data);\n                this.node = node;\n            }\n            this.formData.pid = !this.formData.pid ? \"\" : this.formData.pid;\n            this.formName = formName;\n            if (data && data.id) {\n                this.index = this.mergeList.findIndex(d => d.id === data.id);\n            }\n        },\n        formSubmit() {\n            this.$refs[\"dataForm\"].validate(valid => {\n                if (valid) {\n                    this.formLoading = true;\n                    let data = Object.assign({}, this.formData);\n                    authPermissionRuleSave(data, this.formName)\n                        .then(response => {\n                            this.formLoading = false;\n                            if (response.code) {\n                                this.$message.error(response.message);\n                                return false;\n                            }\n                            this.$message.success(\"操作成功\");\n                            this.formVisible = false;\n                            if (this.formName !== \"edit\") {\n                                if (response.data && response.data.id) {\n                                    data.id = response.data.id;\n                                    if (this.pidData) {\n                                        if (!this.pidData.children) {\n                                            this.$set(\n                                                this.pidData,\n                                                \"children\",\n                                                []\n                                            );\n                                        }\n                                        this.pidData.children.push(data);\n                                    } else {\n                                        this.mergeList.push(data);\n                                    }\n                                }\n                            } else {\n                                const parent = this.node.parent;\n                                const children =\n                                    parent.data.children || parent.data;\n                                const index = children.findIndex(\n                                    d => d.id === data.id\n                                );\n                                children.splice(index, 1, data);\n                            }\n                            // 刷新表单\n                            this.resetForm();\n                        })\n                        .catch(() => {\n                            this.formLoading = false;\n                        });\n                }\n            });\n        },\n        // 删除\n        handleDel(node, data) {\n            if (data.children && data.children.length > 0) {\n                this.$alert(\"请先删除子节点\", \"提示\", {\n                    confirmButtonText: \"确定\"\n                });\n                return false;\n            }\n            if (data.id) {\n                this.$confirm(\"确认删除该记录吗?\", \"提示\", {\n                    type: \"warning\"\n                })\n                    .then(() => {\n                        this.deleteLoading = true;\n                        let para = { id: data.id };\n                        authPermissionRuleDelete(para)\n                            .then(response => {\n                                this.deleteLoading = false;\n                                if (response.code) {\n                                    this.$message.error(response.message);\n                                    return false;\n                                }\n                                this.$message.success(\"删除成功\");\n                                const parent = node.parent;\n                                const children =\n                                    parent.data.children || parent.data;\n                                const index = children.findIndex(\n                                    d => d.id === data.id\n                                );\n                                children.splice(index, 1);\n                            })\n                            .catch(() => {\n                                this.deleteLoading = false;\n                            });\n                    })\n                    .catch(() => {\n                        this.$message.info(\"取消删除\");\n                    });\n            }\n        }\n    },\n    filters: {\n        statusFilterType(status) {\n            const statusMap = {\n                0: \"gray\",\n                1: \"success\"\n            };\n            return statusMap[status];\n        },\n        statusFilterName(status) {\n            const statusMap = {\n                0: \"禁用\",\n                1: \"正常\"\n            };\n            return statusMap[status];\n        }\n    },\n    mounted() {},\n    created() {\n        // 加载表格数据\n        this.getList();\n    }\n};\n</script>\n\n<style type=\"text/scss\" lang=\"scss\">\n</style>\n"]}]}